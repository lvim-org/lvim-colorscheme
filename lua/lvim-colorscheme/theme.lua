local config = require("lvim-colorscheme.config")

local M = {}

M.setup = function(colors)
    local c = colors
    local highlights = {
        Cursor = { bg = c.orange_02, fg = c.none },
        CursorLineNr = { fg = c.teal_03, style = "bold" },
        RedrawDebugNormal = {},
        TabLineSel = { bg = c.bg_statusline, fg = c.green_02 },
        TermCursor = { bg = c.orange_02, fg = c.none },
        Underlined = { sp = c.blue_01, style = "undercurl" },
        lCursor = { bg = c.orange_02, fg = c.none },
        -- UI
        CursorIM = { bg = c.orange_02, fg = c.none },
        CursorLineFold = {},
        CursorLineSign = {},
        EndOfBuffer = { fg = c.bg_03 },
        FloatBorder = { bg = c.bg_float, fg = c.bg_float },
        FloatFooter = {},
        FloatTitle = {},
        FoldColumn = {},
        IncSearch = { bg = c.bg_search, fg = c.green_01, style = "bold" },
        LineNrAbove = { fg = c.bg_04 },
        LineNrBelow = { fg = c.bg_04 },
        MsgSeparator = {},
        MsgArea = { fg = c.color_16 },
        NormalNC = { bg = c.bg_03, fg = c.fg_02 },
        Pmenu = { bg = c.bg_sidebar, fg = c.fg_07 },
        PmenuSel = { bg = c.bg_03, fg = c.orange_03 },
        PmenuThumb = { bg = c.orange_03 },
        PmenuExtra = {},
        PmenuExtraSel = {},
        PmenuKind = {},
        PmenuKindSel = {},
        PmenuSbar = { bg = c.bg_sidebar },
        SideBar = { bg = c.bg_sidebar },
        SideBarNC = { bg = c.bg_sidebar },
        Substitute = { bg = c.red_01, fg = c.bg_01 },
        TabLine = { bg = c.bg_statusline, fg = c.green_02, style = "bold" },
        TabLineFill = { bg = c.bg_statusline },
        TermCursorNC = {},
        VertSplit = { bg = c.bg_01, fg = c.bg_01 },
        VisualNOS = { bg = c.bg_visual },
        Whitespace = { fg = c.bg_06 },
        WildMenu = { bg = c.bg_visual },
        WinSeparator = { link = "VertSplit" },
        -- Diagnostic
        DiagnosticError = { fg = c.error },
        DiagnosticWarn = { fg = c.warning },
        DiagnosticInfo = { fg = c.info },
        DiagnosticHint = { fg = c.hint },
        DiagnosticDeprecated = { fg = c.warning },
        DiagnosticUnderlineError = {},
        DiagnosticUnderlineWarn = {},
        DiagnosticUnderlineInfo = {},
        DiagnosticUnderlineHint = {},
        DiagnosticUnderlineOk = {},
        -- DiagnosticFloatingError = {},
        -- DiagnosticFloatingWarn = {},
        -- DiagnosticFloatingInfo = {},
        -- DiagnosticFloatingHint = {},
        -- DiagnosticFloatingOk = {},
        DiagnosticVirtualTextError = { fg = c.error },
        DiagnosticVirtualTextWarn = { fg = c.warning },
        DiagnosticVirtualTextInfo = { fg = c.info },
        DiagnosticVirtualTextHint = { fg = c.hint },
        DiagnosticVirtualTextOk = {},
        -- Markdown
        MarkdownH6 = { bg = c.bg_statusline, fg = c.red_02 },
        MarkdownH5 = { bg = c.bg_statusline, fg = c.orange_02 },
        MarkdownH4 = { bg = c.bg_statusline, fg = c.green_02 },
        MarkdownH3 = { bg = c.bg_statusline, fg = c.teal_02 },
        MarkdownH2 = { bg = c.bg_statusline, fg = c.cyan_02 },
        MarkdownH1 = { bg = c.bg_statusline, fg = c.blue_02 },
        MarkviewCheckboxCancelled = { fg = c.orange_02 },
        MarkviewCheckboxChecked = { fg = c.green_02 },
        MarkviewCheckboxPending = { fg = c.orange_02 },
        MarkviewCheckboxProgress = { fg = c.teal_02 },
        MarkviewCheckboxUnchecked = { fg = c.red_02 },
        MarkviewCheckboxStriked = { fg = c.cyan_02 },
        MarkviewCode = { bg = c.bg_statusline },
        MarkviewCodeInfo = { bg = c.bg_statusline, fg = c.red_02 },
        MarkviewListItemMinus = { fg = c.blue_02 },
        MarkviewListItemPlus = { fg = c.green_02 },
        MarkviewListItemStar = { fg = c.red_02 },
        -- Help view
        HelpViewBorder = { fg = c.red_01 },
        HelpViewNormal = { fg = c.fg_07 },
        -- Visual Whitespace
        VisualWhiteSpace = { bg = c.bg_cursor_line, fg = c.fg_07 },

        -- Treesitter standard groups
        ["@variable.builtin"] = { link = "VariableBuiltin" },
        ["@constant"] = { link = "Constant" },
        ["constant.builtin"] = { fg = c.gree_02 },
        ["@module"] = { fg = c.green_02 },
        ["@module.builtin"] = { fg = c.gree_02 },
        ["@label"] = { link = "Label" },
        ["@string"] = { link = "String" },
        ["@string.regex"] = { link = "StringRegex" },
        ["@string.escape"] = { link = "StringEscape" },
        ["@string.special"] = { fg = c.gree_02 },
        ["@string.special.url"] = { fg = c.gree_02 },
        ["@character"] = { link = "Character" },
        ["@character.special"] = { link = "SpecialChar" },
        ["@boolean"] = { link = "Boolean" },
        ["@number"] = { link = "Number" },
        ["@number.float"] = {},
        ["@type"] = { link = "Type" },
        ["@type.builtin"] = { link = "Type" },
        ["@attribute"] = { link = "PreProc" },
        ["@property"] = { link = "Property" },
        ["@function"] = { link = "Function" },
        ["@function.builtin"] = {},
        ["@constructor"] = { link = "Constructor" },
        ["@operator"] = { link = "Operator" },
        ["@keyword"] = { link = "Keyword" },
        ["@punctuation"] = { link = "Delimiter" },
        ["@punctuation.special"] = { link = "Delimiter" },
        ["@comment"] = { link = "Comment" },
        ["@comment.error"] = { link = "DiagnosticError" },
        ["@comment.warning"] = { link = "DiagnosticWarn" },
        ["@comment.note"] = { link = "DiagnosticInfo" },
        ["@comment.todo"] = { link = "Todo" },
        ["markupSpecial"] = {}, -- fallback for subgroups; never used itself
        ["@markup.heading"] = { fg = c.green_02 },
        ["@markup.link"] = { link = "Link" },
        ["@diff.plus"] = { link = "Added" },
        ["@diff.minus"] = { link = "Removed" },
        ["@diff.delta"] = { link = "Changed" },
        ["@tag"] = { link = "Tag" },
        ["@struct"] = { link = "Struct" },
        -- LSP semantic tokens
        ["@lsp.type.class"] = { link = "@class" },
        ["@lsp.type.comment"] = { link = "@comment" },
        ["@lsp.type.decorator"] = {},
        ["@lsp.type.enum"] = { link = "@enum" },
        ["@lsp.type.enumMember"] = { link = "@enumMember" },
        ["@lsp.type.function"] = { link = "@function" },
        ["@lsp.type.interface"] = { link = "@type" },
        ["@lsp.type.macro"] = { link = "@constant.macro" },
        ["@lsp.type.method"] = { link = "@method" },
        ["@lsp.type.namespace"] = { link = "@namespace" },
        ["@lsp.type.parameter"] = { link = "@parameter" },
        ["@lsp.type.property"] = { link = "@property" },
        ["@lsp.type.struct"] = { link = "@struct" },
        ["@lsp.type.type"] = { link = "@type" },
        ["@lsp.type.typeParameter"] = { link = "TypeParameter" },
        ["@lsp.type.variable"] = { link = "@variable" },

        -- UI
        Normal = { bg = c.bg_01, fg = c.fg_02 },
        Added = { fg = c.green_02 },
        Changed = { fg = c.orange_03 },
        ColorColumn = { bg = c.bg_04 },
        Conceal = { fg = c.fg_02 },
        CurSearch = {},
        CursorColumn = { bg = c.bg_cursor_line },
        CursorLine = { bg = c.bg_cursor_line },
        DiffAdd = { bg = c.diff.add },
        DiffChange = { bg = c.diff.change },
        DiffDelete = { bg = c.diff.delete },
        DiffText = { bg = c.bg_sidebar },
        Directory = { fg = c.orange_01 },
        ErrorMsg = { fg = c.red_03 },
        FloatShadow = {},
        FloatShadowThrough = {},
        Folded = { bg = c.none, fg = c.fg_07 },
        LineNr = { fg = c.bg_04, style = "bold" },
        MatchParen = {},
        ModeMsg = { bg = c.none, fg = c.color_16, style = "bold" },
        MoreMsg = { fg = c.color_13 },
        NonText = { fg = c.fg_07 },
        NormalFloat = { bg = c.bg_float, fg = c.fg_02 },
        Question = { fg = c.blue_01 },
        QuickFixLine = { bg = c.bg_03, style = "bold" },
        RedrawDebugClear = {},
        RedrawDebugComposed = {},
        RedrawDebugRecompose = {},
        Removed = { fg = c.red_02 },
        Search = { bg = c.bg_search, fg = c.green_01 },
        SignColumn = { bg = c.none },
        SpecialKey = { fg = c.bg_06 },
        SpellBad = { sp = c.error, style = "undercurl" },
        SpellCap = { sp = c.warning, style = "undercurl" },
        SpellLocal = { sp = c.info, style = "undercurl" },
        SpellRare = { sp = c.hint, style = "undercurl" },
        StatusLine = { bg = c.bg_statusline, fg = c.fg_01 },
        StatusLineNC = { bg = c.bg_statusline, fg = c.bg_statusline },
        Title = { fg = c.green_01, style = "bold", italic = false },
        Visual = { bg = c.bg_visual },
        WarningMsg = { fg = c.orange_03 },
        Winbar = { bg = c.bg, fg = c.fg_02 },
        WinbarNC = { bg = c.bg, fg = c.fg_02 },
        -- Syntax
        Character = { fg = c.fg_01 },
        Number = { fg = c.green_03 },
        Boolean = { fg = c.blue_01 },
        Float = { fg = c.green_03 },
        Conditional = { fg = c.orange_01 },
        Repeat = { fg = c.red_01 },
        Label = { fg = c.red_03 },
        Exception = { fg = c.green_03 },
        Include = { fg = c.teal_01 },
        Define = { fg = c.blue_01 },
        Macro = { fg = c.teal_01 },
        PreCondit = {},
        StorageClass = { fg = c.red_01 },
        Structure = { fg = c.orange_03 },
        Typedef = { fg = c.orange_03 },
        Tag = { fg = c.green_01 },
        SpecialChar = { fg = c.teal_02 },                                  -- fix
        SpecialComment = { fg = c.fg_03, style = config.styles.comments }, -- fix
        Debug = { fg = c.green_02 },                                       -- fix
        Ignore = {},
        LspInlayHint = { fg = c.fg_07, style = "bold", italic = true },
        SnippetTabstop = {},
        -- Syntax
        Function = { fg = c.red_02, style = config.styles.functions },
        Constructor = { fg = c.red_02 },
        Field = { fg = c.cyan_02 },
        Variable = { fg = c.teal_02, style = config.styles.variables },
        VariableBuiltin = { fg = c.teal_02, style = config.styles.variables },
        Class = { fg = c.blue_02 },
        Interface = { fg = c.teal_02 },
        Module = { fg = c.orange_02 },
        Property = { fg = c.cyan_03 },
        Unit = { fg = c.green_02 },
        Value = { fg = c.cyan_02 },
        Enum = { fg = c.green_02 },
        Keyword = { fg = c.green_02, style = config.styles.keywords },
        Reference = { fg = c.green_02 },
        EnumMember = { fg = c.blue_02 },
        Constant = { fg = c.red_02 },
        Struct = { fg = c.blue_02 },
        Even = { fg = c.orange_02 },
        Operator = { fg = c.orange_01 },
        TypeParameter = { fg = c.green_02 },

        Folder = { fg = c.blue_02 },
        File = { fg = c.orange_02 },

        Snippet = { fg = c.blue_02 },
        Color = { fg = c.red_02 },

        PreProc = { fg = c.teal_03 },
        Type = { fg = c.orange_03 },
        Delimiter = { fg = c.green_02 },
        Comment = { fg = c.fg_07, style = config.styles.comments },
        String = { fg = c.fg_06 },
        Identifier = { fg = c.green_02, style = config.styles.variables },
        Statement = { fg = c.orange_02 },
        Special = { fg = c.cyan_02 },
        Error = { fg = c.red_03 },
        Todo = { fg = c.orange_01 },

        -- Treesitter standard groups
        ["@variable"] = { link = "Variable" },
        --
        LspReferenceRead = { bg = c.bg_search },
        LspReferenceText = { bg = c.bg_search },
        LspReferenceWrite = { bg = c.bg_search },

        --
        NvimInternalError = {},
        -- Highlight groups (links) used by parser:
        NvimAssignment = {},
        NvimPlainAssignment = {},
        NvimAugmentedAssignment = {},
        NvimAssignmentWithAddition = {},
        NvimAssignmentWithSubtraction = {},
        NvimAssignmentWithConcatenation = {},
        NvimOperator = {},
        NvimUnaryOperator = {},
        NvimUnaryPlus = {},
        NvimUnaryMinus = {},
        NvimNot = {},
        NvimBinaryOperator = {},
        NvimComparison = {},
        NvimComparisonModifier = {},
        NvimBinaryPlus = {},
        NvimBinaryMinus = {},
        NvimConcat = {},
        NvimConcatOrSubscript = {},
        NvimOr = {},
        NvimAnd = {},
        NvimMultiplication = {},
        NvimDivision = {},
        NvimMod = {},
        NvimTernary = {},
        NvimTernaryColon = {},
        NvimParenthesis = {},
        NvimLambda = {},
        NvimNestingParenthesis = {},
        NvimCallingParenthesis = {},
        NvimSubscript = {},
        NvimSubscriptBracket = {},
        NvimSubscriptColon = {},
        NvimCurly = {},
        NvimContainer = {},
        NvimDict = {},
        NvimList = {},
        NvimIdentifier = {},
        NvimIdentifierScope = {},
        NvimIdentifierScopeDelimiter = {},
        NvimIdentifierName = {},
        NvimIdentifierKey = {},
        NvimColon = {},
        NvimComma = {},
        NvimArrow = {},
        NvimRegister = {},
        NvimNumber = {},
        NvimFloat = {},
        NvimNumberPrefix = {},
        NvimOptionSigil = {},
        NvimOptionName = {},
        NvimOptionScope = {},
        NvimOptionScopeDelimiter = {},
        NvimEnvironmentSigil = {},
        NvimEnvironmentName = {},
        NvimString = {},
        NvimStringBody = {},
        NvimStringQuote = {},
        NvimStringSpecial = {},
        NvimSingleQuote = {},
        NvimSingleQuotedBody = {},
        NvimSingleQuotedQuote = {},
        NvimDoubleQuote = {},
        NvimDoubleQuotedBody = {},
        NvimDoubleQuotedEscape = {},
        NvimFigureBrace = {},
        NvimSingleQuotedUnknownEscape = {},
        NvimSpacing = {},

        -- NvimInvalid groups:
        NvimInvalidSingleQuotedUnknownEscape = {},
        NvimInvalid = {},
        NvimInvalidAssignment = {},
        NvimInvalidPlainAssignment = {},
        NvimInvalidAugmentedAssignment = {},
        NvimInvalidAssignmentWithAddition = {},
        NvimInvalidAssignmentWithSubtraction = {},
        NvimInvalidAssignmentWithConcatenation = {},
        NvimInvalidOperator = {},
        NvimInvalidUnaryOperator = {},
        NvimInvalidUnaryPlus = {},
        NvimInvalidUnaryMinus = {},
        NvimInvalidNot = {},
        NvimInvalidBinaryOperator = {},
        NvimInvalidComparison = {},
        NvimInvalidComparisonModifier = {},
        NvimInvalidBinaryPlus = {},
        NvimInvalidBinaryMinus = {},
        NvimInvalidConcat = {},
        NvimInvalidConcatOrSubscript = {},
        NvimInvalidOr = {},
        NvimInvalidAnd = {},
        NvimInvalidMultiplication = {},
        NvimInvalidDivision = {},
        NvimInvalidMod = {},
        NvimInvalidTernary = {},
        NvimInvalidTernaryColon = {},
        NvimInvalidDelimiter = {},
        NvimInvalidParenthesis = {},
        NvimInvalidLambda = {},
        NvimInvalidNestingParenthesis = {},
        NvimInvalidCallingParenthesis = {},
        NvimInvalidSubscript = {},
        NvimInvalidSubscriptBracket = {},
        NvimInvalidSubscriptColon = {},
        NvimInvalidCurly = {},
        NvimInvalidContainer = {},
        NvimInvalidDict = {},
        NvimInvalidList = {},
        NvimInvalidValue = {},
        NvimInvalidIdentifier = {},
        NvimInvalidIdentifierScope = {},
        NvimInvalidIdentifierScopeDelimiter = {},
        NvimInvalidIdentifierName = {},
        NvimInvalidIdentifierKey = {},
        NvimInvalidColon = {},
        NvimInvalidComma = {},
        NvimInvalidArrow = {},
        NvimInvalidRegister = {},
        NvimInvalidNumber = {},
        NvimInvalidFloat = {},
        NvimInvalidNumberPrefix = {},
        NvimInvalidOptionSigil = {},
        NvimInvalidOptionName = {},
        NvimInvalidOptionScope = {},
        NvimInvalidOptionScopeDelimiter = {},
        NvimInvalidEnvironmentSigil = {},
        NvimInvalidEnvironmentName = {},

        -- Invalid string bodies and specials are still highlighted as valid ones to
        -- minimize the red area.
        NvimInvalidString = {},
        NvimInvalidStringBody = {},
        NvimInvalidStringQuote = {},
        NvimInvalidStringSpecial = {},
        NvimInvalidSingleQuote = {},
        NvimInvalidSingleQuotedBody = {},
        NvimInvalidSingleQuotedQuote = {},
        NvimInvalidDoubleQuote = {},
        NvimInvalidDoubleQuotedBody = {},
        NvimInvalidDoubleQuotedEscape = {},
        NvimInvalidDoubleQuotedUnknownEscape = {},
        NvimInvalidFigureBrace = {},
        NvimInvalidSpacing = {},

        -- Not actually invalid, but we show the user that they are doing something
        NvimDoubleQuotedUnknownEscape = {},

        Link = { fg = c.cyan_02 },

        --
        AlphaHeader = { fg = c.red_02 },
        AlphaButton = { fg = c.orange_03 },
        AlphaFooter = { fg = c.orange_01 },
        AlphaQuote = { fg = c.fg_07 },
        BqfPreviewBorder = { bg = c.bg_01, fg = c.green_01 },
        BqfPreviewTitle = { bg = c.bg_01, fg = c.red_02, style = "bold" },
        BqfPreviewSbar = { bg = c.bg_01, fg = c.green_03 },
        BqfPreviewThumb = { bg = c.green_03, fg = c.green_03 },
        BqfPreviewRange = { bg = c.none, fg = c.red_02 },
        --
        CalNormal = { bg = c.bg_sidebar },
        CalSaturday = { fg = c.green_03 },
        CalSunday = { fg = c.green_03 },
        CalToday = { fg = c.green_01, style = "bold" },
        --
        CmpDocumentation = { bg = c.bg_float, fg = c.orange_01 },
        CmpDocumentationBorder = { bg = c.bg_float, fg = c.bg_float },
        CmpItemAbbr = { bg = c.none, fg = c.fg_01 },
        CmpItemAbbrDeprecated = { fg = c.fg_07, bg = "NONE", strikethrough = true },
        CmpItemAbbrMatch = { fg = c.orange_02, bg = "NONE", bold = true },
        CmpItemAbbrMatchFuzzy = { fg = c.orange_02, bg = "NONE", bold = true },
        CmpItemMenu = { fg = c.fg_07, bg = "NONE", italic = true },

        CmpItemKindField = { fg = c.white, bg = c.red_02 },
        CmpItemKindProperty = { fg = c.white, bg = c.red_02 },
        CmpItemKindEvent = { fg = c.white, bg = c.red_02 },

        CmpItemKindText = { fg = c.white, bg = c.green_02 },
        CmpItemKindEnum = { fg = c.white, bg = c.green_02 },
        CmpItemKindKeyword = { fg = c.white, bg = c.green_02 },

        CmpItemKindConstant = { fg = c.white, bg = c.orange_02 },
        CmpItemKindConstructor = { fg = c.white, bg = c.orange_02 },
        CmpItemKindReference = { fg = c.white, bg = c.orange_02 },

        CmpItemKindFunction = { fg = c.white, bg = c.teal_02 },
        CmpItemKindStruct = { fg = c.white, bg = c.teal_02 },
        CmpItemKindClass = { fg = c.white, bg = c.teal_02 },
        CmpItemKindModule = { fg = c.white, bg = c.teal_02 },
        CmpItemKindOperator = { fg = c.white, bg = c.teal_02 },

        CmpItemKindVariable = { fg = c.white, bg = c.fg_07 },
        CmpItemKindFile = { fg = c.white, bg = c.fg_07 },

        CmpItemKindUnit = { fg = c.white, bg = c.blue_02 },
        CmpItemKindSnippet = { fg = c.white, bg = c.blue_02 },
        CmpItemKindFolder = { fg = c.white, bg = c.blue_02 },

        CmpItemKindMethod = { fg = c.white, bg = c.cyan_02 },
        CmpItemKindValue = { fg = c.white, bg = c.cyan_02 },
        CmpItemKindEnumMember = { fg = c.white, bg = c.cyan_02 },

        CmpItemKindInterface = { fg = c.white, bg = c.green_02 },
        CmpItemKindColor = { fg = c.white, bg = c.green_02 },
        CmpItemKindTypeParameter = { fg = c.white, bg = c.green_02 },

        BlinkCmpGhostText = { fg = c.fg_05 },
        BlinkCmpDocSeparator = { fg = c.orange_02 },
        BlinkCmpLabel = { fg = c.fg_07 },
        BlinkCmpMenuSelection = { bg = c.bg_03 },
        BlinkCmpLabelMatch = { bg = c.bg_visual },
        BlinkCmpDoc = { bg = c.bg_float, fg = c.fg_07 },
        BlinkCmpKindText = { fg = c.green_02 },
        BlinkCmpKindMethod = { link = "Function" },
        BlinkCmpKindFunction = { link = "Function" },
        BlinkCmpKindConstructor = { link = "Constructor" },
        BlinkCmpKindField = { link = "Field" },
        BlinkCmpKindVariable = { link = "Variable" },
        BlinkCmpKindClass = { link = "Class" },
        BlinkCmpKindInterface = { link = "Interface" },
        BlinkCmpKindModule = { link = "Module" },
        BlinkCmpKindProperty = { link = "Property" },
        BlinkCmpKindUnit = { link = "Unit" },
        BlinkCmpKindValue = { link = "Value" },
        BlinkCmpKindEnum = { link = "Enum" },
        BlinkCmpKindKeyword = { link = "Keyword" },
        BlinkCmpKindReference = { link = "Reference" },
        BlinkCmpKindEnumMember = { link = "EnumMember" },
        BlinkCmpKindConstant = { link = "Constant" },
        BlinkCmpKindStruct = { link = "Struct" },
        BlinkCmpKindEven = { link = "Even" },
        BlinkCmpKindOperator = { link = "Operator" },
        BlinkCmpKindTypeParameter = { link = "TypeParameter" },
        BlinkCmpKindFolder = { link = "Parameter" },
        BlinkCmpKindSnippet = { link = "Snippet" },
        BlinkCmpKindColor = { link = "Color" },
        --
        MiniCursorword = { bg = c.bg_visual },
        MiniCursorwordCurrent = { bg = c.bg_visual },
        --
        RgFlowHead = { bg = c.bg_statusline, fg = c.red_02, style = "bold" },
        RgFlowInputBg = { bg = c.bg_statusline },
        RgFlowHeadLine = { bg = c.bg_statusline },
        RgFlowInputFlags = { fg = c.teal_02 },
        RgFlowInputPattern = { fg = c.green_02 },
        RgFlowInputPath = { fg = c.teal_02 },
        RgFlowQfPattern = { bg = c.bg_search },
        --
        MiniClueBorder = { bg = c.bg_statusline, fg = c.bg_statusline },
        MiniClueDescGroup = { fg = c.fg_07, bold = true },
        MiniClueDescSingle = { fg = c.green_02 },
        MiniClueNextKey = { bg = c.none, fg = c.green_02, bold = true },
        MiniClueNextKeyWithPostkeys = { fg = c.green_02, bold = true },
        MiniClueSeparator = { fg = c.red_02 },
        MiniClueTitle = { fg = c.red_02, bold = true },
        --
        netrwPlain = { fg = c.fg_07 },
        netrwDir = { fg = c.green_02 },
        --
        NavicSeparator = { link = "Delimiter" },
        NavicIconsArray = { link = "Constructor" },
        NavicText = { link = "Character" },
        NavicIconsClass = { link = "Function" },
        NavicIconsBoolean = { link = "Boolean" },
        NavicIconsConstant = { link = "Constant" },
        NavicIconsConstructor = { link = "Constructor" },
        NavicIconsEnum = { link = "Repeat" },
        NavicIconsEnumMember = { link = "String" },
        NavicIconsEvent = { link = "Special" },
        NavicIconsField = { link = "Field" },
        NavicIconsFile = { link = "Directory" },
        NavicIconsFunction = { link = "Function" },
        NavicIconsInterface = { link = "Special" },
        NavicIconsKey = { link = "Keyword" },
        NavicIconsMethod = { link = "Function" },
        NavicIconsModule = { link = "Special" },
        NavicIconsNamespace = { link = "Include" },
        NavicIconsNull = { link = "Character" },
        NavicIconsNumber = { link = "Number" },
        NavicIconsObject = { link = "Structure" },
        NavicIconsOperator = { link = "Operator" },
        NavicIconsPackage = { link = "Special" },
        NavicIconsProperty = { link = "Property" },
        NavicIconsString = { link = "String" },
        NavicIconsStruct = { link = "Structure" },
        NavicIconsTypeParameter = { link = "Type" },
        NavicIconsVariable = { link = "Variable" },
        --
        HydraRed = { fg = c.red_02 },
        HydraBlue = { fg = c.blue_02 },
        HydraAmaranth = { fg = c.orange_02 },
        HydraTeal = { fg = c.teal_01 },
        HydraPink = { fg = c.cyan_01 },
        HydraHint = { bg = c.bg_float, fg = c.green_03 },
        --
        ToDoError = { fg = c.red_02 },
        ToDoWarning = { fg = c.orange_02 },
        ToDoInfo = { fg = c.blue_02 },
        ToDoHint = { fg = c.teal_02 },
        ToDoTest = { fg = c.red_02 },
        ToDoDefault = { fg = c.blue_02 },
        --
        CtrlSpaceNormal = { bg = c.bg_sidebar },
        CtrlSpaceSelected = { bg = c.bg_sidebar, fg = c.orange_02 },
        CtrlSpaceSearch = { fg = c.cyan_02 },
        CtrlSpaceStatus = { fg = c.green_03 },
        --
        DapUIBreakpointsCurrentLine = { fg = c.green_01, style = "bold" },
        DapUIBreakpointsDisabledLine = { fg = c.bg_01 },
        DapUIBreakpointsInfo = { fg = c.green_01 },
        DapUIBreakpointsLine = { fg = c.cyan_01 },
        DapUIBreakpointsPath = { fg = c.cyan_01 },
        DapUICurrentFrameName = { fg = c.green_01 },
        DapUIDecoration = { fg = c.cyan_01 },
        DapUIFloatBorder = { fg = c.blue_01 },
        DapUIFrameName = { fg = c.green_03 },
        DapUILineNumber = { fg = c.blue_01 },
        DapUIModifiedValue = { fg = c.cyan_01 },
        DapUIScope = { fg = c.blue_01 },
        DapUISource = { fg = c.cyan_01 },
        DapUIStoppedThread = { fg = c.cyan_01 },
        DapUIThread = { fg = c.green_01 },
        DapUIType = { fg = c.cyan_01 },
        DapUIValue = { fg = c.green_03, style = "bold" },
        DapUIVariable = { fg = c.fg_01 },
        DapUIWatchesEmpty = { fg = c.red_02 },
        DapUIWatchesError = { fg = c.red_02 },
        DapUIWatchesValue = { fg = c.teal_01 },
        DapUIPlayPause = { fg = c.green_01 },
        DapUIStop = { fg = c.red_02 },
        DapUIRestart = { fg = c.green_01 },
        DapUIStepOver = { fg = c.orange_01 },
        DapUIStepInto = { fg = c.orange_01 },
        DapUIStepBack = { fg = c.orange_01 },
        DapUIStepOut = { fg = c.orange_01 },
        DapBreakpoint = { fg = c.green_01 },
        DapBreakpointRejected = { fg = c.red_01 },
        DapBreakpointCondition = { fg = c.orange_01 },
        DapStopped = { fg = c.red_01 },
        DapLogPoint = { fg = c.blue_01 },
        --
        DefinitionCount = { fg = c.orange_02 },
        DefinitionIcon = { fg = c.cyan_02 },
        --
        LBVirtualText = { bg = c.NONE, fg = c.red_03 },
        --
        DifbufFile = { fg = c.teal_02 },
        DirbufBlock = { fg = c.teal_02 },
        DirbufChar = { fg = c.teal_02 },
        DirbufDirectory = { fg = c.teal_02 },
        DirbufFifo = { fg = c.teal_02 },
        DirbufHash = { fg = c.teal_02 },
        DirbufLink = { fg = c.teal_02 },
        DirbufSocket = { fg = c.teal_02 },
        --
        GitGutterAdd = { fg = c.gitSigns.add, style = "bold" },
        GitGutterChange = { fg = c.gitSigns.change, style = "bold" },
        GitGutterDelete = { fg = c.gitSigns.delete, style = "bold" },
        GitSignsAdd = { fg = c.gitSigns.add, style = "bold" },
        GitSignsChange = { fg = c.gitSigns.change, style = "bold" },
        GitSignsDelete = { fg = c.gitSigns.delete, style = "bold" },
        GitSignsTopDelete = { fg = c.gitSigns.top_delete, style = "bold" },
        GitSignsChangeDelete = { fg = c.gitSigns.change_delete, style = "bold" },
        GitSignsUntracked = { fg = c.gitSigns.untracked, style = "bold" },
        GitSignsCurrentLineBlame = { fg = c.fg_07, style = "bold" },
        IndentBlanklineChar = { fg = c.bg_search },
        IndentBlanklineContextChar = { fg = c.red_02 },
        IndentBlanklineCurrentChar = { fg = c.red_02 },
        IndentLine = { fg = c.bg_search },
        IndentLineCurrent = { fg = c.red_02 },
        RainbowDelimiterRed = { fg = c.red_02 },
        RainbowDelimiterYellow = { fg = c.teal_02 },
        RainbowDelimiterBlue = { fg = c.blue_02 },
        RainbowDelimiterOrange = { fg = c.fg_06 },
        RainbowDelimiterGreen = { fg = c.green_02 },
        RainbowDelimiterViolet = { fg = c.fg_07 },
        RainbowDelimiterCyan = { fg = c.cyan_02 },
        --
        MiniIndentscopeSymbol = { fg = c.red_02 },
        --
        HlSearchFloat = { fg = c.red_01, style = "bold" },
        HlSearchLens = { fg = c.green_01, style = "bold" },
        HlSearchLensNear = { fg = c.red_01, style = "bold" },
        HlSearchNear = { fg = c.orange_01, style = "bold" },
        --
        HopNextKey = { fg = c.orange_03, style = "bold" },
        HopNextKey1 = { fg = c.blue_03, style = "bold" },
        HopNextKey2 = { fg = c.teal_03, style = "bold" },
        HopUnmatched = { fg = c.green_03 },
        --
        FlashCurrent = { bg = c.red_03, fg = c.white, style = "bold" },
        FlashLabel = { bg = c.teal_03, fg = c.white, style = "bold" },
        FlashPromptIcon = { fg = c.orange_02, style = "bold" },
        --
        LvimPopupNormal = { bg = c.bg_statusline },
        LvimPopupBorder = { bg = c.bg_statusline, fg = c.red_02, style = "bold" },
        LvimSelectNormal = { bg = c.bg_statusline, fg = c.green_01 },
        LvimSelectBorder = { bg = c.bg_statusline, fg = c.red_02, style = "bold" },
        LvimInputNormal = { bg = c.bg_statusline, fg = c.green_01 },
        LvimInputBorder = { bg = c.bg_statusline, fg = c.red_02, style = "bold" },
        --
        MasonError = { fg = c.red_02 },
        MasonHeader = { bg = c.bg_03, fg = c.orange_02, style = "bold" },
        MasonHeaderSecondary = { bg = c.bg_03, fg = c.orange_02, style = "bold" },
        MasonHeading = { fg = c.teal_02, style = "bold" },
        MasonHighlight = { fg = c.green_02 },
        MasonHighlightBlock = { bg = c.orange_02, fg = c.bg_03 },
        MasonHighlightBlockBold = { bg = c.orange_02, fg = c.bg_03, style = "bold" },
        MasonHighlightBlockBoldSecondary = { bg = c.orange_02, fg = c.bg_03, style = "bold" },
        MasonHighlightBlockSecondary = { bg = c.orange_02, fg = c.bg_03 },
        MasonHighlightSecondary = { fg = c.orange_02 },
        MasonLink = { bg = c.bg_03, fg = c.orange_02_02, style = "bold" },
        MasonMuted = { fg = c.orange_02 },
        MasonMutedBlock = { bg = c.bg_03, fg = c.orange_02 },
        MasonMutedBlockBold = { bg = c.bg_03, fg = c.orange_02, style = "bold" },
        --
        GlancePreviewNormal = { bg = c.bg_statusline },
        GlancePreviewMatch = { bg = c.bg_04 },
        GlancePreviewCursorLine = { bg = c.bg_03 },
        GlancePreviewSignColumn = { bg = c.bg_sidebar },
        GlancePreviewEndOfBuffer = { bg = c.bg_statusline },
        GlancePreviewLineNr = { bg = c.bg_statusline, fg = c.bg_06 },
        GlancePreviewBorderBottom = { bg = c.bg_statusline },
        GlanceWinBarFilename = { bg = c.bg_statusline, fg = c.green_01, style = "bold" },
        GlanceWinBarFilepath = { bg = c.bg_statusline, fg = c.cyan_02 },
        GlanceWinBarTitle = { bg = c.bg_statusline, fg = c.red_02, style = "bold" },
        GlanceListNormal = { bg = c.bg_statusline, fg = c.fg_03 },
        GlanceListFilename = { fg = c.green_01, style = "bold" },
        GlanceListFilepath = { fg = c.cyan_02 },
        GlanceListCount = { fg = c.red_02, style = "bold" },
        GlanceListMatch = { fg = c.orange_03 },
        GlanceListCursorLine = { bg = c.bg_03 },
        GlanceListEndOfBuffer = { fg = c.green_01 },
        GlanceListBorderBottom = { bg = c.bg_statusline },
        GlanceFoldIcon = { fg = c.orange_03 },
        GlanceIndent = { fg = c.bg_06 },
        GlanceBorderTop = { bg = c.bg_statusline },
        --
        NeoTreeDimText = { fg = c.fg_03 },
        NeoTreeDirectoryIcon = { fg = c.green_02 },
        NeoTreeDirectoryName = { fg = c.green_02 },
        NeoTreeDotfile = { fg = c.cyan_02 },
        NeoTreeExpander = { fg = c.blue_01_13 },
        NeoTreeFileName = { fg = c.green_02 },
        NeoTreeFloatBorder = { bg = c.bg_float, fg = c.bg_float },
        NeoTreeFloatTitle = { fg = c.orange_02, style = "bold" },
        NeoTreeMessage = { fg = c.fg_03 },
        -- NeoTreeModified = { fg = c.none },
        NeoTreeNormal = { bg = c.bg_sidebar, fg = c.green_02 },
        NeoTreeNormalNC = { bg = c.bg_sidebar, fg = c.green_02 },
        NeoTreeRootName = { fg = c.blue_02, style = "bold" },
        -- NeoTreeStatusLine = { fg = c.color_08 },
        NeoTreeTabInactive = { bg = c.bg_statusline, fg = c.green_02, style = "bold" },
        NeoTreeTabActive = { bg = c.green_02, fg = c.bg_statusline, style = "bold" },
        NeoTreeDiagTotalCount = { fg = c.blue_01, style = "bold" },
        NeoTreeDiagMessage = { fg = c.fg_04 },
        OilDir = { fg = c.green_02, style = "bold" },
        OilFile = { fg = c.orange_03, style = "bold" },
        OilLink = { fg = c.red_02, style = "bold" },
        --
        NeogitBranch = { fg = c.blue_02 },                             -- color_24
        NeogitDiffAddHighlight = { bg = c.bg_02 },
        NeogitDiffContextHighlight = { bg = c.bg_02 },                 -- color_16
        NeogitDiffDeleteHighlight = { bg = c.bg_02 },
        NeogitHunkHeader = { bg = c.bg_02, fg = c.cyan_02 },           -- color_21
        NeogitHunkHeaderHighlight = { bg = c.bg_02, fg = c.green_02 }, -- color_04 color_13
        NeogitRemote = { fg = c.fg_07 },                               -- color_24
        NeogitNotificationInfo = { fg = c.info },
        NeogitNotificationWarning = { fg = c.warning },
        NeogitNotificationError = { fg = c.error },
        NeogitCommitViewDescription = { fg = c.teal_02 }, -- color_07
        NeogitFilePath = { fg = c.red_02 },
        NeogitCommitViewHeader = { fg = c.error },
        NeogitCommitMessage = { fg = c.color_07 }, -- color_07
        NeogitCommitView = { fg = c.fg_07 },       -- color_24
        --
        NoiceBody = { link = "NuiBody" },
        NoiceBorder = { link = "NuiBorder" },
        NoiceText = { fg = c.green_01 },
        NoiceLspProgressSpinner = { fg = c.red_01 },
        NoiceLspProgressTitle = { fg = c.green_01 },
        NoiceLspProgressClient = { fg = c.orange_03 },
        NoiceFormatProgressTodo = { bg = c.none, fg = c.green_01 },
        NoiceFormatProgressDone = { bg = c.green_01, fg = c.bg_01 },
        NoiceFormatConfirm = { bg = c.bg_statusline, fg = c.green_01 },
        NoiceFormatConfirmDefault = { bg = c.bg_statusline, fg = c.green_01 },

        NoiceCompletionItemKindDefault = { fg = c.red_02, bg = c.none, style = config.styles.none },
        NoiceCompletionItemKindKeyword = { fg = c.red_02, bg = c.none, style = config.styles.none },
        NoiceCompletionItemKindVariable = { fg = c.red_02, bg = c.none, style = config.styles.none },
        NoiceCompletionItemKindConstant = { fg = c.red_02, bg = c.none, style = config.styles.none },
        NoiceCompletionItemKindReference = { fg = c.red_02, bg = c.none, style = config.styles.none },
        NoiceCompletionItemKindValue = { fg = c.red_02, bg = c.none, style = config.styles.none },
        NoiceCompletionItemKindFunction = { fg = c.red_02, bg = c.none, style = config.styles.none },
        NoiceCompletionItemKindMethod = { fg = c.red_02, bg = c.none, style = config.styles.none },
        NoiceCompletionItemKindConstructor = { fg = c.red_02, bg = c.none, style = config.styles.none },
        NoiceCompletionItemKindClass = { fg = c.red_02, bg = c.none, style = config.styles.none },
        NoiceCompletionItemKindInterface = { fg = c.red_02, bg = c.none, style = config.styles.none },
        NoiceCompletionItemKindStruct = { fg = c.red_02, bg = c.none, style = config.styles.none },
        NoiceCompletionItemKindEvent = { fg = c.red_02, bg = c.none, style = config.styles.none },
        NoiceCompletionItemKindEnum = { fg = c.red_02, bg = c.none, style = config.styles.none },
        NoiceCompletionItemKindUnit = { fg = c.red_02, bg = c.none, style = config.styles.none },
        NoiceCompletionItemKindModule = { fg = c.red_02, bg = c.none, style = config.styles.none },
        NoiceCompletionItemKindProperty = { fg = c.red_02, bg = c.none, style = config.styles.none },
        NoiceCompletionItemKindField = { fg = c.red_02, bg = c.none, style = config.styles.none },
        NoiceCompletionItemKindTypeParameter = { fg = c.red_02, bg = c.none, style = config.styles.none },
        NoiceCompletionItemKindEnumMember = { fg = c.red_02, bg = c.none, style = config.styles.none },
        NoiceCompletionItemKindOperator = { fg = c.red_02, bg = c.none, style = config.styles.none },
        NoiceCompletionItemKindSnippet = { fg = c.red_02, bg = c.none, style = config.styles.none },
        --
        ComposerNormal = { bg = c.bg_01, fg = c.orange_02 },
        ComposerBorder = { bg = c.bg_01, fg = c.bg_01 },
        MacroEditorNormal = { bg = c.bg_01, fg = c.orange_02 },
        DelaySymbol = { bg = c.none, fg = c.blue_01 },
        PlayingSymbol = { bg = c.none, fg = c.green_01 },
        RecordingSymbol = { bg = c.none, fg = c.green_03 },

        --
        NotifyDEBUGBody = { bg = c.bg_statusline, fg = c.fg_01 },
        NotifyDEBUGBorder = { bg = c.bg_statusline, fg = c.hint },
        NotifyDEBUGIcon = { bg = c.bg_statusline, fg = c.hint },
        NotifyDEBUGTitle = { bg = c.bg_statusline, fg = c.hint },
        NotifyERRORBody = { bg = c.bg_statusline, fg = c.fg_01 },
        NotifyERRORBorder = { bg = c.bg_statusline, fg = c.error },
        NotifyERRORIcon = { bg = c.bg_statusline, fg = c.error },
        NotifyERRORTitle = { bg = c.bg_statusline, fg = c.error },
        NotifyINFOBody = { bg = c.bg_statusline, fg = c.fg_01 },
        NotifyINFOBorder = { bg = c.bg_statusline, fg = c.info },
        NotifyINFOIcon = { bg = c.bg_statusline, fg = c.info },
        NotifyINFOTitle = { bg = c.bg_statusline, fg = c.info },
        NotifyTRACEBody = { bg = c.bg_statusline, fg = c.fg_01 },
        NotifyTRACEBorder = { bg = c.bg_statusline, fg = c.hint },
        NotifyTRACEIcon = { bg = c.bg_statusline, fg = c.hint },
        NotifyTRACETitle = { bg = c.bg_statusline, fg = c.hint },
        NotifyWARNBody = { bg = c.bg_statusline, fg = c.fg_01 },
        NotifyWARNBorder = { bg = c.bg_statusline, fg = c.warning },
        NotifyWARNIcon = { bg = c.bg_statusline, fg = c.warning },
        NotifyWARNTitle = { bg = c.bg_statusline, fg = c.warning },
        --
        NuiBody = { bg = c.bg_statusline, fg = c.green_01 },
        NuiBorder = { bg = c.bg_statusline, fg = c.red_02, style = "bold" },
        --
        BookmarkSign = { fg = c.red_02 },
        --
        OctoBubble = { bg = c.green_01, fg = c.bg_03, style = "bold" },
        OctoStateClosed = { fg = c.green_03 },
        OctoStateOpen = { fg = c.green_01 },
        OctoViewer = { fg = c.orange_01 },
        --
        OrgTSBlock = { fg = c.fg_04 },
        OrgTSBlockCode = { bg = c.bg_statusline },
        OrgTSCheckbox = { fg = c.red_02, style = "bold" },
        OrgTSCheckboxChecked = { fg = c.green_02, style = "bold" },
        OrgTSCheckboxHalfChecked = { fg = c.orange_02, style = "bold" },
        OrgTSHeadlineLevel1 = { fg = c.blue_01, style = "bold" },
        OrgTSHeadlineLevel2 = { fg = c.teal_01, style = "bold" },
        OrgTSHeadlineLevel3 = { fg = c.cyan_01, style = "bold" },
        OrgTSHeadlineLevel4 = { fg = c.green_01, style = "bold" },
        OrgTSHeadlineLevel5 = { fg = c.red_01, style = "bold" },
        OrgTSHeadlineLevel6 = { fg = c.orange_01, style = "bold" },
        OrgTSHeadlineLevel7 = { fg = c.teal_03, style = "bold" },
        OrgTSHeadlineLevel8 = { fg = c.cyan_03, style = "bold" },
        --
        PubspecAssistDependencyOutdated = { fg = c.red_02 },
        PubspecAssistDependencyUpToDate = { fg = c.green_02 },
        PubspecAssistDependencyUnknown = { fg = c.orange_02 },
        --
        PackageInfoOutdatedVersion = { fg = c.red_02 },
        PackageInfoUpToDateVersion = { fg = c.green_02 },
        --
        SniprunFloatingWinErr = { fg = c.error, style = "bold" },
        SniprunFloatingWinOk = { fg = c.success, style = "bold" },
        SniprunVirtualTextErr = { fg = c.error, style = "bold" },
        SniprunVirtualTextOk = { fg = c.success, style = "bold" },
        --
        TelescopeBorder = { bg = c.bg_01, fg = c.bg_01 },
        TelescopeMatching = { bg = c.orange_02, fg = c.bg_01, style = "bold" },
        TelescopeMultiSelection = { bg = c.bg_05, fg = c.green_01 },
        TelescopeNormal = { bg = c.bg_01, fg = c.orange_01 },
        TelescopePreviewTitle = { bg = c.green_01, fg = c.bg_04, style = "bold" },
        TelescopePromptBorder = { bg = c.bg_sidebar, fg = c.bg_sidebar },
        TelescopePromptNormal = { bg = c.bg_sidebar, fg = c.green_01 },
        TelescopePromptPrefix = { bg = c.bg_sidebar, fg = c.green_01 },
        TelescopePromptTitle = { bg = c.green_01, fg = c.bg_04, style = "bold" },
        TelescopeResultsTitle = { bg = c.none, fg = c.none },
        TelescopeSelection = { bg = c.bg_03, fg = c.green_01 },
        TelescopeSelectionCaret = { bg = c.bg_05, fg = c.green_01 },
        --
        FzfLuaNormal = { bg = c.bg_sidebar, fg = c.green_02 },
        FzfLuaTitle = { bg = c.bg_sidebar, fg = c.red_02, style = "bold" },
        FzfLuaBorder = { bg = c.bg_sidebar, fg = c.orange_03 },
        FzfLuaPreviewBorder = { bg = c.bg_sidebar, fg = c.orange_03 },
        FzfLuaPrompt = { bg = c.bg_sidebar, fg = c.red_02 },
        FzfLuaLine = { bg = c.bg_sidebar, fg = c.fg_07 },
        FzfLuaLinePlus = { bg = c.bg_sidebar, fg = c.green_02 },
        FzfLuaItemKindVariable = { fg = c.blue_02 },
        FzfLuaSearch = { fg = c.red_02 },
        --
        TroubleCount = { fg = c.color_23 },
        TroubleError = { bg = c.error },
        TroubleInformation = { bg = c.info },
        TroubleNormal = { bg = c.color_01 },
        TroubleText = { fg = c.color_19 },
        TroubleTextError = { fg = c.error },
        TroubleTextHint = { fg = c.hint },
        TroubleTextInformation = { fg = c.info },
        TroubleTextWarning = { fg = c.warning },
        TroubleWarning = { bg = c.warning },
        --
        SnacksActiveBorder = { fg = c.green_02 },
        SnacksInActiveBorder = { fg = c.red_02 },
        SnacksDim = {fg = c.fg_05},
        --
        WhichKey = { fg = c.orange_01 },
        WhichKeyBorder = { bg = c.bg_float, fg = c.bg_float },
        WhichKeyDesc = { fg = c.red_01 },
        WhichKeyFloat = { bg = c.bg_float },
        WhichKeyGroup = { fg = c.fg_05 },
        WhichKeySeparator = { fg = c.fg_04 },
        WhichKeyValue = { fg = c.fg_05 },
        --
        TreesitterContext = { bg = c.bg_statusline },
        TreesitterContextLineNumber = { bg = c.bg_statusline, fg = c.teal_03, style = "bold" },
        --
        TinyInlineDiagnosticVirtualTextError = { bg = c.bg_statusline, fg = c.error },
        TinyInlineDiagnosticVirtualTextWarn = { bg = c.bg_statusline, fg = c.warning },
        TinyInlineDiagnosticVirtualTextInfo = { bg = c.bg_statusline, fg = c.info },
        TinyInlineDiagnosticVirtualTextHint = { bg = c.bg_statusline, fg = c.hint },
        TinyInlineDiagnosticVirtualTextArrow = { bg = c.bg_cursor_line, fg = c.fg_07 },

        TinyInlineInvDiagnosticVirtualTextError = { fg = c.error, bg = c.bg_cursor_line },
        TinyInlineInvDiagnosticVirtualTextWarn = { fg = c.warning, bg = c.bg_cursor_line },
        TinyInlineInvDiagnosticVirtualTextInfo = { fg = c.info, bg = c.bg_cursor_line },
        TinyInlineInvDiagnosticVirtualTextHint = { fg = c.hint, bg = c.bg_cursor_line },

        TinyInlineInvDiagnosticVirtualTextErrorNoBg = { fg = c.error, bg = "None" },
        TinyInlineInvDiagnosticVirtualTextWarnNoBg = { fg = c.warning, bg = "None" },
        TinyInlineInvDiagnosticVirtualTextInfoNoBg = { fg = c.info, bg = "None" },
        TinyInlineInvDiagnosticVirtualTextHintNoBg = { fg = c.hint, bg = "None" },
        --
        RipSubBackdrop = { bg = c.bg_statusline },
        --
        QuickFixLineNr = { fg = c.red_02 },
        --
        TSAnnotation = { link = "PreProc" },
        TSAttribute = { link = "PreProc" },            --
        TSBoolean = { link = "Boolean" },              --
        TSCharacterSpecial = { link = "SpecialChar" }, --
        TSComment = { link = "Comment" },              --
        TSConditional = { link = "Conditional" },      --
        TSConstBuiltin = { link = "Special" },
        TSConstMacro = { link = "Define" },
        TSConstant = { link = "Constant" },       --
        TSConstructor = { link = "Constructor" }, --
        TSDanger = { link = "Danger" },           --
        TSDebug = { link = "Debug" },
        TSDefine = { link = "Define" },
        TSEmphasis = { italic = true, default = true },
        TSEnvironment = { link = "Macro" },
        TSEnvironmentName = { link = "Type" },
        TSError = { link = "ErrorMsg" },
        TSException = { link = "Exception" },
        TSField = { link = "Field" }, --
        TSFloat = { link = "Float" },
        TSFuncBuiltin = { link = "FuncBuiltin" },
        TSFuncMacro = { link = "Macro" },
        TSFunction = { link = "Function" },
        TSFunctionCall = { link = "TSFunction" },
        TSInclude = { link = "Include" },
        TSKeyword = { link = "Keyword" },                 --
        TSKeywordFunction = { link = "KeywordFunction" }, --
        TSKeywordOperator = { link = "Operator" },
        TSKeywordReturn = { link = "TSKeyword" },
        TSLabel = { link = "Label" },
        TSLiteral = { link = "String" },
        TSMath = { link = "Special" },
        TSMethod = { link = "Function" },
        TSMethodCall = { link = "TSMethod" },
        TSNamespace = { link = "Include" },
        TSNone = { default = true },
        TSNote = { link = "Note" },
        TSNumber = { link = "Number" },
        TSOperator = { link = "Operator" }, --
        TSParameter = { link = "Parameter" },
        TSParameterReference = { link = "TSParameter" },
        TSPreProc = { link = "PreProc" },
        TSProperty = { link = "Property" },        --
        TSPunctBracket = { link = "Delimiter" },   --
        TSPunctDelimiter = { link = "Delimiter" }, --
        TSPunctSpecial = { link = "Special" },     --
        TSRepeat = { link = "Repeat" },
        TSStorageClass = { link = "StorageClass" },
        TSStrike = { strikethrough = true },
        TSString = { link = "String" },             --
        TSStringEscape = { link = "StringEscape" }, --
        TSStringRegex = { link = "StringRegex" },   --
        TSStringSpecial = { link = "SpecialChar" },
        TSStrong = { bold = true, default = true },
        TSStructure = { link = "Structure" },         --
        TSSymbol = { link = "Identifier" },
        TSTag = { link = "Tag" },                     --
        TSTagAttribute = { link = "TSProperty" },     --
        TSTagDelimiter = { link = "Delimiter" },      --
        TSText = { link = "TSNone" },
        TSTextReference = { link = "TextReference" }, --
        TSTitle = { link = "Title" },                 --
        TSTodo = { link = "Todo" },
        TSType = { link = "Type" },                   --
        TSTypeBuiltin = { link = "Type" },            --
        TSTypeDefinition = { link = "Typedef" },      --
        TSTypeQualifier = { link = "Type" },
        TSURI = { link = "Underlined" },
        TSUnderline = { link = "Underlined" },
        TSVariable = { link = "Variable" },               --
        TSVariableBuiltin = { link = "VariableBuiltin" }, --
    }
    if not vim.diagnostic then
        local severity_map = {
            Error = "Error",
            Warn = "Warning",
            Info = "Information",
            Hint = "Hint",
        }
        local types = { "Default", "VirtualText", "Underline" }
        for _, type in ipairs(types) do
            for snew, sold in pairs(severity_map) do
                highlights["LspDiagnostics" .. type .. sold] = {
                    link = "Diagnostic" .. (type == "Default" and "" or type) .. snew,
                }
            end
        end
    end
    return highlights
end

return M
